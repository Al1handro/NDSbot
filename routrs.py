from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import kbd

router = Router()

admin_ids = [1242185723, 7012760302]  # —Ñ–∏–ª—å—Ç—Ä—ã –∞–¥–º–∏–Ω–æ–≤ , 6329233703,
list_HR = ['–í–ª–∞–¥–∏–º–∏—Ä', '–ï–≤–≥–µ–Ω–∏–π', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ú–∞—Ä–∏—è']
list_leads = []
list_applications = []
garbage = ''


class AddHR(StatesGroup):
    input_hr = State()


class AdminAnswer(StatesGroup):
    select_HR = State()
    input_answer = State()


class AddApplication(StatesGroup):
    add = State()


class IsAdmin(BaseFilter):
    def __init__(self, admin_ids) -> None:
        self.admin_ids = admin_ids

    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.admin_ids


class NotIsAdmin(BaseFilter):
    def __init__(self, admin_ids) -> None:
        self.admin_ids = admin_ids

    async def __call__(self, message: Message) -> bool:
        return not message.from_user.id in self.admin_ids


@router.message(CommandStart())
async def start(message: Message) -> None:
    global list_leads
    if len(list_leads) == 0:
        list_leads.append(
            '#' + message.from_user.username + f' –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ - {(datetime.now()).strftime("%d %b %Y %H:%M:%S")}')
    else:
        flag = True
        for i in list_leads:
            if message.from_user.username in i:
                flag = False
        if flag:
            list_leads.append(
                '#' + message.from_user.username + f' –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ - {(datetime.now()).strftime("%d %b %Y %H:%M:%S")}')
    await message.answer('''üçÄ–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç —Å–µ—Ä–≤–∏—Å–µ Greenavi!

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ø–æ–¥–±–æ—Ä–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –æ–±–µ—Å–ø–µ—á–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–æ–≥–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª–æ–≤–∏—è—Ö —Ä–∞–±–æ—Ç—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É, –∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç–µ. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ —É—Å–ø–µ—à–Ω—ã–º!

–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –û–±–Ω–æ–≤–ª—è–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∫ –∫–æ–º–ø–∞–Ω–∏–π, —É–ª—É—á—à–∞–µ–º –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –≤–Ω–µ–¥—Ä—è–µ–º –≤ —Ä–∞–±–æ—Ç—É –Ω–æ–≤–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–° –Ω–∞–º–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:

‚Äì –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∞–ª—å–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏;
‚Äì –Ω–∞–ª–∏—á–∏–µ —Ä/—Å;
‚Äì –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å—ã (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞, –ø–æ—á—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–∞–π—Ç);
‚Äì —à—Ç–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤;
‚Äì –æ–±—à–∏—Ä–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –∫–æ–¥–æ–≤ –û–ö–í–≠–î –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.  

–°–µ—Ä–≤–∏—Å \"Greenavi\" –Ω–∞—Ü–µ–ª–µ–Ω –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –≥–¥–µ –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–ø–æ—Ä–æ–π –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.

 üçÄ–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –ù–î–° –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ó–∞—è–≤–∫–∞ –Ω–∞ –ù–î–°".''')
    await message.answer(text='–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.')
    await message.answer_document(document='BQACAgIAAxkBAAIBqGcMHgeod8zWWV0KSe9mHuE7I8HmAAJqVQACf69pSMqIMv-QUkxtNgQ')
    await message.answer_document(document='BQACAgIAAxkBAAIBrmcMHtVZD9Q83sGt7-sXvjMM1N9nAAJvVQACf69pSAj0wUdW_bc4NgQ')


@router.message(IsAdmin(admin_ids), F.text == 'admin')
async def admin(message: Message) -> None:
    k = [
        [InlineKeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instruction')]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=k)
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Greenavi.\n'
                         '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏).\n'
                         '–î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π',
                         reply_markup=kb)
    await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É '
                         '(–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç admin)',
                         reply_markup=kbd.start_kbd_admin)


@router.callback_query(F.data == 'instruction')
async def instruction(call: CallbackQuery) -> None:
    await call.message.answer(text='1) –í –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3 –∫–Ω–æ–ø–∫–∏: —Å—Ç–∞—Ç–∏—Å—Ç–∫–∞, —Å–ø–∏—Å–æ–∫ HR, –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É. –ö–æ—Ç–æ—Ä—ã–µ '
                              '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫, —Å–ø–∏—Å–æ–∫ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –¥–ª—è HR –∏'
                              ' –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏\n–î–∞–ª—å–Ω–µ–π—à–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã –∏ '
                              '–≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n')
    await call.message.answer(text='2) –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å '
                              '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ö—ç—à—Ç–µ–≥ –º–µ—Ç–∫—É (#username)\n')
    await call.message.answer(text='3) –°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, '
                              '—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É.\n')


@router.callback_query(F.data == 'cansel_add_hr')
async def cansel(call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    await call.message.delete()
    await state.clear()
    global list_HR
    if len(list_HR) == 0:
        await call.message.answer('–ù–µ—Ç HR', reply_markup=kbd.add_hr)
    else:
        x = ''
        for i in list_HR:
            x += i + '\n'
        await call.message.answer(f'{x}', reply_markup=kbd.add_hr)


@router.callback_query(F.data == 'clear_hr')
async def clear_hr(call: CallbackQuery, bot: Bot) -> None:
    await call.message.delete()
    global list_HR
    list_HR.clear()
    await bot.send_message(chat_id=call.from_user.id,
                           text='–°–ø–∏—Å–æ–∫ HR –æ—á–∏—â–µ–Ω', reply_markup=kbd.add_hr)


@router.message(IsAdmin(admin_ids), F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def leads(message: Message) -> None:
    global list_leads
    global list_applications
    k = [
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã', callback_data='look_leads')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏', callback_data='look_application')]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=k)
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ - {len(list_leads)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ - {len(list_applications)}',
                         reply_markup=kb)


@router.message(IsAdmin(admin_ids), F.text == '–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É')
async def accept_application(message: Message, bot: Bot, state: FSMContext) -> None:
    await state.set_state(AddApplication.add)
    k = [
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='close_answer')]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=k)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ–º–∞—Ç–µ #username', reply_markup=kb)


@router.message(AddApplication.add)
async def add_application(message: Message, state: FSMContext) -> None:
    await state.clear()
    global list_leads
    global list_applications
    if len(list_leads) == 0:
        await message.answer('–ù–µ—Ç—É –ª–∏–¥–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏')
    else:
        app = message.text + f' –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ - {(datetime.now()).strftime("%d %b %Y %H:%M:%S")}'
        list_applications.append(app)
        await message.answer(f'–ó–∞—è–≤–∫–∞ {app}\n—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
        for i in range(0, len(list_leads)):
            if message.text in list_leads[i]:
                list_leads.pop(i)
                break


@router.callback_query(IsAdmin(admin_ids), F.data == 'go_around')
async def leads(call: CallbackQuery) -> None:
    await call.message.delete()
    global list_leads
    global list_applications
    k = [
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã', callback_data='look_leads')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏', callback_data='look_application')]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=k)
    await call.message.answer(
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ - {len(list_leads)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ - {len(list_applications)}',
        reply_markup=kb)


@router.callback_query(F.data == 'look_leads')
async def look_leads(call: CallbackQuery, bot: Bot) -> None:
    await call.message.delete()
    global list_leads
    global garbage
    if len(list_leads) == 0:
        await call.message.answer(text='–õ–∏—Å—Ç –ª–∏–¥–æ–≤ –ø—É—Å—Ç', reply_markup=kbd.go_around)
    else:
        for i in list_leads:
            garbage += i + '\n'
        await call.message.answer(text=f'{garbage}', reply_markup=kbd.go_around)
    garbage = ''


@router.callback_query(F.data == 'look_application')
async def look_application(call: CallbackQuery, bot: Bot) -> None:
    await call.message.delete()
    global list_applications
    global garbage
    if len(list_applications) == 0:
        await call.message.answer(text='–õ–∏—Å—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç',
                                  reply_markup=kbd.go_around)
    else:
        for i in list_applications:
            garbage += i + '\n'
        await call.message.answer(text=f'{garbage}', reply_markup=kbd.go_around)
    garbage = ''


@router.message(IsAdmin(admin_ids), F.text == '–°–ø–∏—Å–æ–∫ HR')
async def hr(message: Message) -> None:
    global list_HR
    if len(list_HR) == 0:
        await message.answer('–ù–µ—Ç HR', reply_markup=kbd.add_hr)
    else:
        x = ''
        for i in list_HR:
            x += i + '\n'
        await message.answer(f'{x}', reply_markup=kbd.add_hr)


@router.callback_query(F.data == 'add_hr')
async def add_hr(call: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await call.message.delete()
    await bot.send_message(chat_id=call.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è HR –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–µ –∏–º—è –∑–∞–ø–∏—Å–∞–Ω–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.',
                           reply_markup=kbd.cansel_add_hr)
    await state.set_state(AddHR.input_hr)


@router.message(AddHR.input_hr)
async def input_hr(message: Message, state: FSMContext) -> None:
    global list_HR
    list_HR += message.text.split('\n')
    await message.answer('–°–ø–∏—Å–æ–∫ HR –∏–∑–º–µ–Ω–µ–Ω')
    await state.clear()
    if len(list_HR) == 0:
        await message.answer('–ù–µ—Ç HR', reply_markup=kbd.add_hr)
    else:
        x = ''
        for i in list_HR:
            x += i + '\n'
        await message.answer(f'{x}', reply_markup=kbd.add_hr)


@router.callback_query(F.data == 'close_answer')
async def close_answer(call: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await call.message.delete()


@router.callback_query(F.data.startswith('answer_admin'))
async def answer_script(call: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    x = call.data.split('`')
    chat_id = x[1]
    username = x[2]
    print(x)
    global list_HR
    res = []
    for i in list_HR:
        res.append([InlineKeyboardButton(text=i, callback_data='next' + '`' + i + '`' + chat_id + '`' + username)])
    res.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='close_answer')])
    kb = InlineKeyboardMarkup(inline_keyboard=res)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ HR', reply_markup=kb)


@router.callback_query(F.data.startswith('next'))
async def input_answer(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.message.delete()
    await state.set_state(AdminAnswer.input_answer)
    x = call.data.split('`')
    name = x[1]
    chat_id = x[2]
    username = x[3]
    await state.update_data(HR_name=name)
    await state.update_data(chat_id=chat_id)
    await state.update_data(username=username)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')


@router.message(AdminAnswer.input_answer)
async def input_answer(message: Message, bot: Bot, state: FSMContext):
    zalupa = await state.get_data()
    print(zalupa)
    await bot.send_message(chat_id=int(zalupa['chat_id']),
                           text=f'<b>{zalupa["HR_name"]}</b>\n'
                                f'{message.text}',
                           parse_mode=ParseMode.HTML)
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{zalupa["username"]}'
                                f'\n#{zalupa["username"]}')
    await state.clear()


@router.message(NotIsAdmin(admin_ids))
async def default(message: Message, bot: Bot) -> None:
    global list_leads
    buttons = [
        [InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º', callback_data='answer_admin' + '`' +
                                                                        str(message.from_user.id) + '`' +
                                                                        str(message.from_user.username))],
        [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data='accept_the_application')]
    ]
    answer_button = InlineKeyboardMarkup(inline_keyboard=buttons)
    for i in admin_ids:
        await bot.forward_message(i, message.from_user.id, message.message_id)
        await bot.send_message(chat_id=i, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}'
                                               f'\n#{message.from_user.username}',
                               reply_markup=answer_button)
